name: Infra, Build & Deploy Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: kmn1624/craftista
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform_provision:
    name: Provision Infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init & Apply
        run: |
          cd infra/
          terraform init
          terraform apply -auto-approve

      - name: Extract Terraform Outputs with Fallback
        run: |
          cd infra/
          echo "[INFO] Attempting Terraform output extraction..."
          set +e
          terraform output -json > outputs.json
          if jq -e . outputs.json >/dev/null 2>&1; then
            jq -r '.instance_ips.value[]' outputs.json > instance_ips.txt
            jq -r '.private_key.value' outputs.json > k8s-key.pem
            chmod 600 k8s-key.pem
            echo "[INFO] Extracted IPs:"
            cat instance_ips.txt
            set -e
          else
            echo "[WARN] Terraform output failed, trying AWS CLI method..."
            pip install --upgrade awscli
            aws ec2 describe-instances --region $AWS_REGION \
              --filters "Name=tag:Name,Values=k8s-*" \
              --query "Reservations[*].Instances[*].PublicIpAddress" --output text > instance_ips.txt
            echo "[INFO] Extracted IPs via AWS CLI:"
            cat instance_ips.txt
            if [ ! -f k8s-key.pem ]; then
              echo "[ERROR] Private key not found, cannot proceed"
              exit 1
            fi
          fi

      - name: Upload Artifacts for Next Job
        uses: actions/upload-artifact@v4
        with:
          name: k8s-artifacts
          path: |
            infra/k8s-key.pem
            infra/instance_ips.txt

  docker_build_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform_provision
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Images
        run: |
          docker build -t $REGISTRY:frontend-latest ./frontend
          docker push $REGISTRY:frontend-latest
          docker build -t $REGISTRY:catalogue-latest ./catalogue
          docker push $REGISTRY:catalogue-latest
          docker build -t $REGISTRY:voting-latest ./voting
          docker push $REGISTRY:voting-latest
          docker build -t $REGISTRY:recommendation-latest ./recommendation
          docker push $REGISTRY:recommendation-latest

  deploy_to_k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [docker_build_push]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download SSH Key & IPs
        uses: actions/download-artifact@v4
        with:
          name: k8s-artifacts
          path: ./infra

      - name: Install SSH Client & kubectl
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass kubectl
          chmod 600 infra/k8s-key.pem

      - name: Wait for EC2 Instances to be Ready
        run: |
          MASTER_IP=$(head -n 1 infra/instance_ips.txt | awk '{print $1}')
          WORKER1_IP=$(sed -n '2p' infra/instance_ips.txt)
          WORKER2_IP=$(sed -n '3p' infra/instance_ips.txt)

          echo "[INFO] Waiting for EC2 instances to pass status checks..."
          pip install awscli --upgrade
          for ip in $MASTER_IP $WORKER1_IP $WORKER2_IP; do
            INSTANCE_ID=$(aws ec2 describe-instances --region $AWS_REGION --filters "Name=ip-address,Values=$ip" --query "Reservations[*].Instances[*].InstanceId" --output text)
            echo "[INFO] Checking $ip ($INSTANCE_ID)..."
            aws ec2 wait instance-status-ok --region $AWS_REGION --instance-ids $INSTANCE_ID
            echo "[INFO] $ip is ready!"
          done

      - name: Setup Kubernetes Cluster via SSH
        run: |
          MASTER_IP=$(head -n 1 infra/instance_ips.txt | awk '{print $1}')
          WORKER1_IP=$(sed -n '2p' infra/instance_ips.txt)
          WORKER2_IP=$(sed -n '3p' infra/instance_ips.txt)

          echo "[INFO] Waiting for SSH connectivity..."
          for i in {1..15}; do
            if ssh -i infra/k8s-key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$MASTER_IP "echo 'SSH OK'" 2>/dev/null; then
              echo "[INFO] SSH is ready!"
              break
            fi
            echo "SSH attempt $i failed, retrying in 10s..."
            sleep 10
            if [ "$i" -eq 15 ]; then
              echo "[ERROR] SSH failed after 15 attempts. Destroying infrastructure..."
              cd infra && terraform init && terraform destroy -auto-approve
              exit 1
            fi
          done

          echo "[INFO] Copying scripts..."
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/install_docker.sh ubuntu@$MASTER_IP:/home/ubuntu/
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/kube-install.sh ubuntu@$MASTER_IP:/home/ubuntu/
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/k8s-key.pem ubuntu@$MASTER_IP:/home/ubuntu/k8s-key.pem

          echo "[INFO] Running setup on Master..."
          ssh -i infra/k8s-key.pem -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "chmod +x install_docker.sh kube-install.sh && sudo bash install_docker.sh && sudo bash kube-install.sh $WORKER1_IP $WORKER2_IP"
