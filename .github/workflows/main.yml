name: Full Infra, Build & Deploy Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: kmn1624/craftista
  AWS_REGION: ap-south-1

jobs:
  terraform_provision:
    name: "Provision Infra with Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Terraform Init & Apply
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve

      - name: Save SSH Key as Artifact
        run: |
          cd infra
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          echo "Private key saved"
        shell: bash

  install_k8s:
    name: "Install Kubernetes (kubeadm)"
    runs-on: ubuntu-latest
    needs: terraform_provision
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Download SSH Key Artifact
        uses: actions/download-artifact@v3
        with:
          name: private-key
          path: ./ssh

      - name: SSH into Master & Configure Cluster
        run: |
          chmod 600 ./ssh/private_key.pem
          MASTER_IP=$(terraform -chdir=infra output -raw master_ip)
          WORKER1_IP=$(terraform -chdir=infra output -raw worker1_ip)
          WORKER2_IP=$(terraform -chdir=infra output -raw worker2_ip)

          echo "Installing Kubernetes on all nodes..."
          scp -o StrictHostKeyChecking=no -i ./ssh/private_key.pem scripts/kube-install.sh ubuntu@$MASTER_IP:/home/ubuntu/
          ssh -o StrictHostKeyChecking=no -i ./ssh/private_key.pem ubuntu@$MASTER_IP "chmod +x kube-install.sh && sudo ./kube-install.sh master $MASTER_IP $WORKER1_IP $WORKER2_IP"
          
          echo "Fetching kubeconfig..."
          scp -o StrictHostKeyChecking=no -i ./ssh/private_key.pem ubuntu@$MASTER_IP:/home/ubuntu/.kube/config kubeconfig
          
      - name: Upload kubeconfig as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: kubeconfig
          path: kubeconfig

  docker_build_push:
    name: "Build & Push Docker Images"
    runs-on: ubuntu-latest
    needs: install_k8s
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Images
        run: |
          docker build -t $REGISTRY:frontend-latest ./frontend
          docker push $REGISTRY:frontend-latest

          docker build -t $REGISTRY:catalogue-latest ./catalogue
          docker push $REGISTRY:catalogue-latest

          docker build -t $REGISTRY:voting-latest ./voting
          docker push $REGISTRY:voting-latest

          docker build -t $REGISTRY:recommendation-latest ./recommendation
          docker push $REGISTRY:recommendation-latest

  deploy_to_k8s:
    name: "Deploy App to Kubernetes"
    runs-on: ubuntu-latest
    needs: docker_build_push
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Download kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: kubeconfig
          path: ~/.kube

      - name: Setup kubectl
        run: |
          mv ~/.kube/kubeconfig ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy Microservices
        run: |
          kubectl apply -f k8s-manifests/
