name: Build, Deploy & Infra Provision

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      infra: ${{ steps.filter.outputs.infra }}
      build: ${{ steps.filter.outputs.build }}
      deploy: ${{ steps.filter.outputs.deploy }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            infra:
              - 'infra/**'
            build:
              - 'frontend/**'
              - 'catalogue/**'
              - 'voting/**'
              - 'recommendation/**'
            deploy:
              - 'k8s-manifests/**'

  terraform_provision:
    needs: changes
    if: needs.changes.outputs.infra == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - run: |
          cd infra
          terraform init
          terraform apply -auto-approve

  docker_build_push:
    needs: [changes, terraform_provision]
    if: needs.changes.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - run: |
          if [ -d "frontend" ]; then docker build -t $REGISTRY:frontend-latest ./frontend && docker push $REGISTRY:frontend-latest; fi
          if [ -d "catalogue" ]; then docker build -t $REGISTRY:catalogue-latest ./catalogue && docker push $REGISTRY:catalogue-latest; fi
          if [ -d "voting" ]; then docker build -t $REGISTRY:voting-latest ./voting && docker push $REGISTRY:voting-latest; fi
          if [ -d "recommendation" ]; then docker build -t $REGISTRY:recommendation-latest ./recommendation && docker push $REGISTRY:recommendation-latest; fi

  deploy_to_k8s:
    needs: [changes, docker_build_push]
    if: needs.changes.outputs.deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          ssh -i infra/k8s.pem -o StrictHostKeyChecking=no ubuntu@$(terraform output -raw master_public_ip) "cat /etc/kubernetes/admin.conf" > ~/.kube/config
      - run: kubectl apply -f k8s-manifests/
