name: Full Automated Infra, Build & Deploy

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**'
      - 'frontend/**'
      - 'catalogue/**'
      - 'voting/**'
      - 'recommendation/**'
      - 'k8s-manifests/**'
  workflow_dispatch:

env:
  REGISTRY: kmn1624/craftista
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform_provision:
    name: "Provision Infra with Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run Terraform
        run: |
          cd terraform/
          terraform init
          terraform apply -auto-approve

      - name: Upload SSH Private Key
        uses: actions/upload-artifact@v4
        with:
          name: ssh-key
          path: terraform/k8s-key.pem

      - name: Upload Instance IPs
        run: cat terraform/instance_ips.txt
        uses: actions/upload-artifact@v4
        with:
          name: instance-ips
          path: terraform/instance_ips.txt

  install_k8s:
    name: "Install Kubernetes & Generate Kubeconfig"
    needs: terraform_provision
    runs-on: ubuntu-latest
    steps:
      - name: Download SSH Key
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: .

      - name: Download Instance IPs
        uses: actions/download-artifact@v4
        with:
          name: instance-ips
          path: .

      - name: Install K8s on Cluster
        run: |
          chmod 400 k8s-key.pem
          MASTER_IP=$(head -1 instance_ips.txt)
          WORKER_IPS=$(tail -n +2 instance_ips.txt)

          # Install kubeadm and Docker on master
          ssh -o StrictHostKeyChecking=no -i k8s-key.pem ubuntu@$MASTER_IP "bash -s" < terraform/kube-install.sh master "$WORKER_IPS"

          # Generate kubeconfig and copy locally
          scp -o StrictHostKeyChecking=no -i k8s-key.pem ubuntu@$MASTER_IP:/home/ubuntu/admin.conf kubeconfig

      - name: Upload Kubeconfig
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig

  docker_build_push:
    name: "Build and Push Docker Images"
    needs: install_k8s
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Frontend
        run: |
          docker build -t $REGISTRY:frontend-latest ./frontend
          docker push $REGISTRY:frontend-latest

      - name: Build & Push Catalogue
        run: |
          docker build -t $REGISTRY:catalogue-latest ./catalogue
          docker push $REGISTRY:catalogue-latest

      - name: Build & Push Voting
        run: |
          docker build -t $REGISTRY:voting-latest ./voting
          docker push $REGISTRY:voting-latest

      - name: Build & Push Recommendation
        run: |
          docker build -t $REGISTRY:recommendation-latest ./recommendation
          docker push $REGISTRY:recommendation-latest

  deploy_to_k8s:
    name: "Deploy to Kubernetes"
    needs: docker_build_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download Kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube

      - name: Set KUBECONFIG
        run: echo "KUBECONFIG=$HOME/.kube/kubeconfig" >> $GITHUB_ENV

      - name: Deploy All Microservices
        run: |
          kubectl apply -f k8s-manifests/frontend.yaml
          kubectl apply -f k8s-manifests/catalogue.yaml
          kubectl apply -f k8s-manifests/voting.yaml
          kubectl apply -f k8s-manifests/recommendation.yaml
