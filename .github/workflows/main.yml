name: Infra, Build & Deploy Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: kmn1624/craftista
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform_provision:
    name: Provision Infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init & Apply
        run: |
          cd infra/
          terraform init
          terraform apply -auto-approve

      - name: Extract Outputs and Save Files (with retry)
        run: |
          cd infra/
          sudo apt-get install -y jq

          echo "Waiting for Terraform outputs to be ready..."
          for i in {1..5}; do
            OUTPUT_JSON=$(terraform output -json 2>/dev/null || echo "")
            if echo "$OUTPUT_JSON" | jq empty > /dev/null 2>&1; then
              echo "Valid JSON received"
              break
            fi
            echo "Attempt $i: Waiting 5 seconds before retry..."
            sleep 5
          done

          if [ -z "$OUTPUT_JSON" ] || ! echo "$OUTPUT_JSON" | jq empty; then
            echo "Failed to extract Terraform outputs after retries!"
            exit 1
          fi

          INSTANCE_IPS=$(echo "$OUTPUT_JSON" | jq -r '.instance_ips.value[]' || echo "")
          PRIVATE_KEY=$(terraform output -raw private_key || echo "")

          if [ -z "$INSTANCE_IPS" ] || [ -z "$PRIVATE_KEY" ]; then
            echo "Failed to extract instance IPs or private key!"
            exit 1
          fi

          echo "$INSTANCE_IPS" > instance_ips.txt
          echo "$PRIVATE_KEY" > k8s-key.pem
          chmod 600 k8s-key.pem

          echo "Extracted IPs:"
          cat instance_ips.txt

      - name: Upload SSH Key & IPs as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: k8s-artifacts
          path: |
            infra/k8s-key.pem
            infra/instance_ips.txt

  docker_build_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform_provision
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Images
        run: |
          docker build -t $REGISTRY:frontend-latest ./frontend
          docker push $REGISTRY:frontend-latest
          docker build -t $REGISTRY:catalogue-latest ./catalogue
          docker push $REGISTRY:catalogue-latest
          docker build -t $REGISTRY:voting-latest ./voting
          docker push $REGISTRY:voting-latest
          docker build -t $REGISTRY:recommendation-latest ./recommendation
          docker push $REGISTRY:recommendation-latest

  deploy_to_k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [docker_build_push]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download SSH Key & IPs
        uses: actions/download-artifact@v4
        with:
          name: k8s-artifacts
          path: ./infra

      - name: Install SSH Client & Set Permissions
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          chmod 600 infra/k8s-key.pem

      - name: Setup Kubernetes Cluster via SSH
        run: |
          MASTER_IP=$(sed -n '1p' infra/instance_ips.txt)
          WORKER1_IP=$(sed -n '2p' infra/instance_ips.txt)
          WORKER2_IP=$(sed -n '3p' infra/instance_ips.txt)

          echo "Master: $MASTER_IP, Worker1: $WORKER1_IP, Worker2: $WORKER2_IP"

          # Copy scripts
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/install_docker.sh ubuntu@$MASTER_IP:/home/ubuntu/
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/kube-install.sh ubuntu@$MASTER_IP:/home/ubuntu/

          # Run setup
          ssh -i infra/k8s-key.pem -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "bash install_docker.sh && bash kube-install.sh $WORKER1_IP $WORKER2_IP"

      - name: Deploy Microservices
        run: |
          mkdir -p ~/.kube
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no ubuntu@$(sed -n '1p' infra/instance_ips.txt):/home/ubuntu/admin.conf ~/.kube/config
          export KUBECONFIG=~/.kube/config
          kubectl apply -f k8s-manifests/

  destroy_infra:
    name: Rollback Infra if Failed
    runs-on: ubuntu-latest
    if: failure()
    needs: [terraform_provision, docker_build_push, deploy_to_k8s]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Destroy Infra
        run: |
          cd infra/
          terraform init
          terraform destroy -auto-approve
