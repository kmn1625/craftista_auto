name: Build, Deploy & Infra Provision

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: kmn1624/craftista
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform_provision:
    name: "Provision Infra with Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cleanup old infra (optional destroy)
        run: |
          cd infra/
          terraform init
          terraform destroy -auto-approve || true
        continue-on-error: true  # Prevent pipeline failure on destroy

      - name: Terraform Apply
        run: |
          cd infra/
          terraform apply -auto-approve

  docker_build_push:
    name: "Build and Push Docker Images"
    needs: terraform_provision
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.24-dind
        options: --privileged
    steps:
      - name: Checkout CI repo
        uses: actions/checkout@v3

      - name: Clone Microservices Repo
        run: git clone https://github.com/kmn1625/craftista_auto.git source-code

      - name: Docker Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Frontend
        run: |
          docker build -t $REGISTRY:frontend-latest ./frontend
          docker push $REGISTRY:frontend-latest

      - name: Build and Push Catalogue
        run: |
          docker build -t $REGISTRY:catalogue-latest ./catalogue
          docker push $REGISTRY:catalogue-latest

      - name: Build and Push Voting
        run: |
          cd source-code/voting
          chmod +x gradlew
          ./gradlew build --no-daemon
          cd ../..
          docker build -t $REGISTRY:voting-latest ./voting
          docker push $REGISTRY:voting-latest

      - name: Build and Push Recommendation
        run: |
          docker build -t $REGISTRY:recommendation-latest ./recommendation
          docker push $REGISTRY:recommendation-latest

  deploy_to_k8s:
    name: "Deploy to Kubernetes"
    needs: docker_build_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 -d > ~/.kube/config

      - name: Deploy All Microservices
        run: |
          kubectl apply -f k8s-manifests/frontend.yaml
          kubectl apply -f k8s-manifests/catalogue.yaml
          kubectl apply -f k8s-manifests/voting.yaml
          kubectl apply -f k8s-manifests/recommendation.yaml
