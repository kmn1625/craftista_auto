name: Deploy Kubernetes Cluster & Microservices

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      REGISTRY: kmn1624/craftista

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init & Apply
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve

      - name: Extract Instance Details (Robust Parsing)
        id: extract
        run: |
          echo "[INFO] Attempting Terraform output extraction..."
          cd infra
          terraform output -json > tf_output.json || echo "{}" > tf_output.json

          echo "[DEBUG] Terraform output:"
          cat tf_output.json

          # Extract any IP addresses recursively
          jq -r '.. | scalars | select(test("^[0-9]{1,3}(\\.[0-9]{1,3}){3}$"))' tf_output.json > instance_ips.txt || true

          if [ ! -s instance_ips.txt ]; then
            echo "[WARN] No IPs from Terraform. Using AWS CLI fallback..."
            cd ..
            sudo apt-get update && sudo apt-get install -y python3-pip
            pip3 install awscli
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region $AWS_REGION

            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=k8s-node*" "Name=instance-state-name,Values=running" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text > infra/instance_ips.txt
          fi

          # Extract SSH key
          jq -r '.. | objects | .private_key? // empty' tf_output.json > k8s-key.pem || true
          chmod 600 k8s-key.pem || true
          mv k8s-key.pem infra/ || true

          echo "[INFO] Extracted IPs:"
          cat instance_ips.txt

      - name: Wait for SSH Connectivity
        run: |
          cd infra
          MASTER_IP=$(sed -n '1p' instance_ips.txt)
          echo "[INFO] Master Node: $MASTER_IP"

          for i in {1..15}; do
            if ssh -i k8s-key.pem -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "echo connected"; then
              echo "[INFO] SSH Connected."
              exit 0
            fi
            echo "[WARN] SSH attempt $i failed. Retrying in 15s..."
            sleep 15
          done

          echo "[ERROR] SSH failed after 15 attempts. Destroying infrastructure."
          terraform destroy -auto-approve
          exit 1

      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass curl

      - name: Configure Master & Workers
        run: |
          cd infra
          MASTER_IP=$(sed -n '1p' instance_ips.txt)
          WORKER1_IP=$(sed -n '2p' instance_ips.txt)
          WORKER2_IP=$(sed -n '3p' instance_ips.txt)
          echo "[INFO] Master: $MASTER_IP, Worker1: $WORKER1_IP, Worker2: $WORKER2_IP"

          echo "[INFO] Copying scripts..."
          scp -i k8s-key.pem -o StrictHostKeyChecking=no install_docker.sh ubuntu@$MASTER_IP:/home/ubuntu/
          scp -i k8s-key.pem -o StrictHostKeyChecking=no kube-install.sh ubuntu@$MASTER_IP:/home/ubuntu/
          scp -i k8s-key.pem -o StrictHostKeyChecking=no k8s-key.pem ubuntu@$MASTER_IP:/home/ubuntu/k8s-key.pem

          echo "[INFO] Running setup on Master..."
          ssh -i k8s-key.pem -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "chmod +x install_docker.sh kube-install.sh && sudo bash install_docker.sh && sudo bash kube-install.sh $WORKER1_IP $WORKER2_IP"

      - name: Deploy Microservices
        run: |
          echo "[INFO] Deploying Microservices to Kubernetes..."
          cd manifests
          kubectl apply -f .
