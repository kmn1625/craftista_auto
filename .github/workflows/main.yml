name: Deploy Kubernetes Cluster & Microservices

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      REGISTRY: kmn1624/craftista

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip jq sshpass curl

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize & Apply Terraform
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve

      - name: Extract Instance Details (Terraform → jq → AWS CLI Fallback)
        id: extract
        run: |
          echo "[INFO] Attempting Terraform output extraction..."
          cd infra
          if terraform output -json instance_ips &> tf_output.json; then
            if jq -e . tf_output.json >/dev/null 2>&1; then
              echo "[INFO] Extracting IPs from Terraform output..."
              jq -r '.value[]' tf_output.json > instance_ips.txt
              jq -r '.private_key.value' tf_output.json > k8s-key.pem
            else
              echo "[ERROR] Invalid JSON from Terraform output."
              exit 1
            fi
          else
            echo "[WARN] Terraform output failed, trying AWS CLI fallback..."
            cd ..
            pip install --upgrade pip
            pip install awscli
            if ! aws ec2 describe-instances --region $AWS_REGION --query 'Reservations[*].Instances[*].PublicIpAddress' --output text > infra/instance_ips.txt; then
              echo "[ERROR] AWS CLI fallback failed. Exiting."
              exit 1
            fi
          fi
          chmod 600 infra/k8s-key.pem || true
          echo "[INFO] Extracted IPs:"
          cat infra/instance_ips.txt

      - name: Prepare Environment Variables
        run: |
          MASTER_IP=$(sed -n '1p' infra/instance_ips.txt)
          WORKER1_IP=$(sed -n '2p' infra/instance_ips.txt)
          WORKER2_IP=$(sed -n '3p' infra/instance_ips.txt)
          echo "MASTER_IP=$MASTER_IP" >> $GITHUB_ENV
          echo "WORKER1_IP=$WORKER1_IP" >> $GITHUB_ENV
          echo "WORKER2_IP=$WORKER2_IP" >> $GITHUB_ENV
          echo "[INFO] Master: $MASTER_IP, Worker1: $WORKER1_IP, Worker2: $WORKER2_IP"

      - name: Wait for SSH Connectivity
        run: |
          ATTEMPTS=0
          MAX_ATTEMPTS=15
          until ssh -i infra/k8s-key.pem -o StrictHostKeyChecking=no ubuntu@$MASTER_IP 'echo "SSH Connected"' 2>/dev/null; do
            ATTEMPTS=$((ATTEMPTS+1))
            echo "[INFO] SSH attempt $ATTEMPTS failed, retrying in 10s..."
            if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
              echo "[ERROR] SSH connection failed after $MAX_ATTEMPTS attempts. Destroying infra..."
              cd infra && terraform destroy -auto-approve
              exit 1
            fi
            sleep 10
          done
          echo "[INFO] SSH connectivity established."

      - name: Copy Scripts to Master
        run: |
          echo "[INFO] Copying scripts..."
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/install_docker.sh ubuntu@$MASTER_IP:/home/ubuntu/
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/kube-install.sh ubuntu@$MASTER_IP:/home/ubuntu/
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/k8s-key.pem ubuntu@$MASTER_IP:/home/ubuntu/k8s-key.pem

      - name: Setup Kubernetes on Master
        run: |
          echo "[INFO] Running setup on Master..."
          ssh -i infra/k8s-key.pem -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "
            chmod +x install_docker.sh kube-install.sh &&
            sudo bash install_docker.sh &&
            sudo bash kube-install.sh $WORKER1_IP $WORKER2_IP
          "

      - name: Deploy Manifests
        run: |
          echo "[INFO] Deploying microservices..."
          ssh -i infra/k8s-key.pem -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "
            kubectl apply -f /home/ubuntu/manifests/
          "

      - name: Destroy Infrastructure on Completion
        if: always()
        run: |
          echo "[INFO] Destroying infrastructure..."
          cd infra && terraform destroy -auto-approve
