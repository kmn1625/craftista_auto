name: Provision Infra and Deploy K8s

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      infra_provisioned: ${{ steps.provision.outputs.done }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Terraform & AWS CLI
        run: |
          sudo apt-get update && sudo apt-get install -y unzip curl python3-pip
          TERRAFORM_VERSION="1.6.6"
          curl -sSL -o terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          terraform version
          pip install --upgrade pip && pip install awscli --quiet

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "${{ secrets.AWS_REGION }}"

      - name: Initialize & Apply Terraform
        id: provision
        working-directory: infra
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false
          echo "done=true" >> $GITHUB_OUTPUT

      - name: Extract Instance IPs (Fallback Logic)
        id: extract-ips
        run: |
          mkdir -p infra
          if terraform -chdir=infra output -json | jq -r '.instance_ips.value[]' > infra/instance_ips.txt 2>/dev/null; then
            echo "[INFO] IPs extracted using Terraform"
          else
            echo "[WARN] Terraform output failed. Trying AWS CLI fallback..."
            INSTANCE_IDS=$(terraform -chdir=infra output -raw instance_ids | tr -d '[],"')
            aws ec2 describe-instances --instance-ids $INSTANCE_IDS \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text | tr '\t' '\n' > infra/instance_ips.txt
            cat infra/instance_ips.txt
          fi

      - name: Install SSH Client & kubectl
        run: |
          sudo apt-get install -y sshpass curl
          K8S_VERSION=$(curl -s https://dl.k8s.io/release/stable.txt || echo "v1.29.0")
          curl -sSL --retry 5 -o kubectl "https://dl.k8s.io/release/$K8S_VERSION/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Provision Kubernetes Cluster
        run: |
          MASTER_IP=$(sed -n '1p' infra/instance_ips.txt)
          WORKER1_IP=$(sed -n '2p' infra/instance_ips.txt)
          WORKER2_IP=$(sed -n '3p' infra/instance_ips.txt)
          echo "[INFO] Waiting for SSH connectivity..."
          RETRIES=0
          while ! ssh -o StrictHostKeyChecking=no -i infra/k8s-key.pem ubuntu@$MASTER_IP "echo OK" >/dev/null 2>&1; do
            RETRIES=$((RETRIES+1))
            if [ $RETRIES -ge 15 ]; then
              echo "[ERROR] SSH connectivity failed after 15 attempts"
              exit 1
            fi
            sleep 10
          done
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/install_docker.sh ubuntu@$MASTER_IP:/home/ubuntu/
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/kube-install.sh ubuntu@$MASTER_IP:/home/ubuntu/
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no infra/k8s-key.pem ubuntu@$MASTER_IP:/home/ubuntu/k8s-key.pem
          ssh -i infra/k8s-key.pem -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "chmod +x install_docker.sh kube-install.sh && sudo bash install_docker.sh && sudo bash kube-install.sh $WORKER1_IP $WORKER2_IP"

      - name: Deploy Microservices
        run: |
          MASTER_IP=$(sed -n '1p' infra/instance_ips.txt)
          scp -i infra/k8s-key.pem -o StrictHostKeyChecking=no -r k8s-manifests ubuntu@$MASTER_IP:/home/ubuntu/
          ssh -i infra/k8s-key.pem -o StrictHostKeyChecking=no ubuntu@$MASTER_IP "kubectl apply -f k8s-manifests/"

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && needs.deploy.outputs.infra_provisioned == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Terraform & AWS CLI
        run: |
          sudo apt-get update && sudo apt-get install -y unzip curl python3-pip
          pip install --upgrade pip && pip install awscli
          curl -sSL -o terraform.zip "https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip"
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          terraform version
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "${{ secrets.AWS_REGION }}"

      - name: Destroy Infrastructure
        working-directory: infra
        run: |
          echo "[INFO] Cleaning up resources..."
          terraform destroy -auto-approve
