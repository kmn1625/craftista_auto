name: Full Infra + Docker + ArgoCD GitOps

permissions:
  contents: write  # âœ… Needed to push infra state branch

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'frontend/**'
      - 'catalogue/**'
      - 'voting/**'
      - 'recommendation/**'
      - 'k8s/**'
  workflow_dispatch:

env:
  REGISTRY: kmn1624/craftista
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  provision_infra:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'infra') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init & Apply
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve

      - name: Extract Outputs & Push to Branch
        run: |
          cd infra
          echo "[INFO] Extracting Terraform outputs..."
          OUTPUT=$(terraform output -json || echo "")

          if [ -z "$OUTPUT" ] || ! echo "$OUTPUT" | jq empty >/dev/null 2>&1; then
            echo "[WARN] Terraform output invalid. Using AWS CLI fallback..."
            pip install awscli --quiet
            INSTANCE_IPS=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=k8s-*" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            echo "$INSTANCE_IPS" | tr '\t' '\n' > instance_ips.txt
          else
            echo "$OUTPUT" | jq -r '.instance_ips.value[]?' > instance_ips.txt
            echo "$OUTPUT" | jq -r '.private_key.value' > k8s-key.pem
          fi
          chmod 600 k8s-key.pem

          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin
          git checkout infra-state || git checkout --orphan infra-state
          mkdir -p infra-state
          cp instance_ips.txt k8s-key.pem infra-state/
          git add infra-state/
          git commit -m "Update infra state"
          git push origin infra-state --force

  docker_build_push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: provision_infra
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, 'docker')
    steps:
      - uses: actions/checkout@v4

      - name: Restore infra-state files
        run: |
          git fetch origin infra-state
          git restore --source=origin/infra-state infra-state/
          echo "[INFO] Infra state files restored:"
          ls -l infra-state

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Images
        run: |
          docker build -t $REGISTRY:frontend-latest ./frontend
          docker push $REGISTRY:frontend-latest
          docker build -t $REGISTRY:catalogue-latest ./catalogue
          docker push $REGISTRY:catalogue-latest
          docker build -t $REGISTRY:voting-latest ./voting
          docker push $REGISTRY:voting-latest
          docker build -t $REGISTRY:recommendation-latest ./recommendation
          docker push $REGISTRY:recommendation-latest

  deploy_with_argocd:
    name: Deploy with ArgoCD
    runs-on: ubuntu-latest
    needs: docker_build_push
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, 'k8s')
    steps:
      - uses: actions/checkout@v4

      - name: Restore infra-state files
        run: |
          git fetch origin infra-state
          git restore --source=origin/infra-state infra-state/
          echo "[INFO] Using infra artifacts:"
          ls -l infra-state

      - name: SSH into EC2 & Install MicroK8s + ArgoCD
        run: |
          IP=$(cat infra-state/instance_ips.txt | head -n 1)
          chmod 600 infra-state/k8s-key.pem
          ssh -o StrictHostKeyChecking=no -i infra-state/k8s-key.pem ubuntu@$IP << 'EOF'
            sudo snap install microk8s --classic --channel=1.32/stable
            sudo usermod -aG microk8s ubuntu
            sudo chown -R ubuntu ~/.kube
            sudo microk8s status --wait-ready
            sudo microk8s enable dns storage
            sudo microk8s kubectl create namespace argocd || true
            sudo microk8s kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            sudo microk8s kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=300s
            sudo microk8s kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
            mkdir -p ~/.kube
            sudo microk8s config | sudo tee /home/ubuntu/.kube/config > /dev/null
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
          EOF

      - name: Install ArgoCD CLI and Sync App
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/
          IP=$(cat infra-state/instance_ips.txt | head -n 1)
          PASSWORD=$(ssh -o StrictHostKeyChecking=no -i infra-state/k8s-key.pem ubuntu@$IP "sudo microk8s kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' | base64 --decode")
          argocd login $IP --username admin --password $PASSWORD --insecure
          argocd app create craftista-app \
            --repo https://github.com/${{ github.repository }}.git \
            --path k8s \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace default \
            --sync-policy automated || echo "App already exists"
          argocd app sync craftista-app
