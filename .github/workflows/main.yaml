name: Full Infra → Docker → Deploy with ArgoCD

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'Dockerfile'
      - 'frontend/**'
      - 'catalogue/**'
      - 'voting/**'
      - 'recommendation/**'
      - 'k8s/**'

permissions:
  contents: write

env:
  REGISTRY: kmn1624/craftista
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:

  # ===================== INFRA JOB =====================
  infra:
    name: Provision Infra & Install ArgoCD
    runs-on: ubuntu-latest
    steps:
      - name: ✅ Checkout Repo
        uses: actions/checkout@v4

      - name: ✅ Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: ✅ Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ✅ Terraform Init & Apply
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve

      - name: ✅ Extract IPs or Fallback to AWS CLI
        run: |
          cd infra
          OUTPUT=$(terraform output -json || echo "")
          if [ -z "$OUTPUT" ] || ! echo "$OUTPUT" | jq empty >/dev/null 2>&1; then
            echo "[WARN] Terraform outputs invalid. Using AWS CLI fallback."
            pip install awscli --quiet
            INSTANCE_IPS=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=k8s-*" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            echo "$INSTANCE_IPS" | tr '\t' '\n' > instance_ips.txt
          else
            echo "$OUTPUT" | jq -r '.instance_ips.value[]?' > instance_ips.txt
            echo "$OUTPUT" | jq -r '.private_key.value' > k8s-key.pem
          fi
          chmod 600 k8s-key.pem

      - name: ✅ Install MicroK8s and ArgoCD
        run: |
          IP=$(head -n 1 infra/instance_ips.txt)
          ssh -o StrictHostKeyChecking=no -i infra/k8s-key.pem ubuntu@$IP " \
            sudo snap install microk8s --classic && \
            sudo microk8s status --wait-ready && \
            sudo microk8s enable dns && \
            sudo microk8s kubectl create namespace argocd || true && \
            sudo microk8s kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml && \
            sudo microk8s kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd && \
            sudo microk8s kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}' && \
            sudo mkdir -p /home/ubuntu/.kube && \
            sudo microk8s config > /home/ubuntu/.kube/config && \
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube"

      - name: ✅ Save Infra State to Branch
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin
          git switch --orphan infra-state || git switch infra-state
          mkdir -p infra-state
          cp infra/instance_ips.txt infra/k8s-key.pem infra-state/
          git add infra-state/
          git commit -m "Update infra state"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git infra-state --force

      - name: ✅ Destroy Infra on Failure
        if: failure()
        run: |
          echo "[ERROR] Destroying infra due to failure..."
          cd infra
          terraform destroy -auto-approve

  # ===================== DOCKER JOB =====================
  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [infra]
    steps:
      - name: ✅ Checkout Repo
        uses: actions/checkout@v4

      - name: ✅ Fetch infra-state Branch
        run: |
          git fetch origin infra-state:infra-state
          git switch infra-state
          ls -l infra-state

      - name: ✅ Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: ✅ Build & Push Images
        run: |
          docker build -t $REGISTRY:frontend-${GITHUB_SHA} ./frontend
          docker push $REGISTRY:frontend-${GITHUB_SHA}
          docker build -t $REGISTRY:catalogue-${GITHUB_SHA} ./catalogue
          docker push $REGISTRY:catalogue-${GITHUB_SHA}
          docker build -t $REGISTRY:voting-${GITHUB_SHA} ./voting
          docker push $REGISTRY:voting-${GITHUB_SHA}
          docker build -t $REGISTRY:recommendation-${GITHUB_SHA} ./recommendation
          docker push $REGISTRY:recommendation-${GITHUB_SHA}

  # ===================== ARGOCD DEPLOY JOB =====================
  deploy:
    name: Deploy via ArgoCD
    runs-on: ubuntu-latest
    needs: [docker]
    steps:
      - name: ✅ Trigger ArgoCD Sync
        run: |
          echo "[INFO] Triggering ArgoCD sync for application..."
          # TODO: Implement ArgoCD CLI or API sync after initial setup
