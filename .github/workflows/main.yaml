name: Infra → Docker → K8s Deployment Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - 'Dockerfile'
      - 'frontend/**'
      - 'catalogue/**'
      - 'voting/**'
      - 'recommendation/**'
      - 'k8s/**'
  workflow_dispatch:

permissions:
  contents: write

env:
  REGISTRY: kmn1624/craftista
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  # -------------------------------
  # ✅ 1. Provision Infrastructure
  # -------------------------------
  provision_infra:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'infra') || contains(join(github.event.pull_request.changed_files.*), 'infra/')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init & Apply
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve

      - name: Extract Outputs or Fallback to AWS CLI
        run: |
          cd infra
          echo "[INFO] Extracting Terraform outputs..."
          OUTPUT=$(terraform output -json || echo "")

          if [ -z "$OUTPUT" ] || ! echo "$OUTPUT" | jq empty >/dev/null 2>&1; then
            echo "[WARN] Terraform outputs invalid. Using AWS CLI fallback..."
            pip install awscli --quiet

            INSTANCE_IPS=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=k8s-*" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)

            if [ -z "$INSTANCE_IPS" ]; then
              echo "[ERROR] No instance IPs found. Destroying infra..."
              terraform destroy -auto-approve
              exit 1
            fi

            echo "$INSTANCE_IPS" | tr '\t' '\n' > instance_ips.txt

            if [ ! -f k8s-key.pem ]; then
              echo "[ERROR] Private key missing. Destroying infra..."
              terraform destroy -auto-approve
              exit 1
            fi
          else
            echo "$OUTPUT" > outputs.json
            echo "$OUTPUT" | jq -r '.instance_ips.value[]?' > instance_ips.txt
            echo "$OUTPUT" | jq -r '.private_key.value' > k8s-key.pem
            chmod 600 k8s-key.pem
          fi

          echo "[INFO] IPs extracted:"
          cat instance_ips.txt

      - name: Push Infra State to Branch
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin
          git checkout infra-state || git checkout --orphan infra-state
          mkdir -p infra-state
          cp infra/instance_ips.txt infra/k8s-key.pem infra-state/
          git add infra-state/
          git commit -m "Update infra state"
          git push origin infra-state --force

  # -------------------------------
  # ✅ 2. Build & Push Docker Images
  # -------------------------------
  docker_build_push:
    runs-on: ubuntu-latest
    needs: [provision_infra]
    if: contains(join(github.event.pull_request.changed_files.*), 'Dockerfile') || contains(join(github.event.pull_request.changed_files.*), 'frontend/') || contains(join(github.event.pull_request.changed_files.*), 'catalogue/') || contains(join(github.event.pull_request.changed_files.*), 'voting/') || contains(join(github.event.pull_request.changed_files.*), 'recommendation/')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Fetch Infra State Branch
        run: |
          git fetch origin infra-state || echo "[WARN] No infra-state branch found."
          if git ls-tree -r origin/infra-state --name-only | grep -q 'infra-state/'; then
            git restore --source=origin/infra-state infra-state/
            echo "[INFO] Infra state files restored:"
            ls -l infra-state
          else
            echo "[ERROR] No infra-state directory found. Cannot proceed."
            exit 1
          fi

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Images
        run: |
          docker build -t $REGISTRY:frontend-latest ./frontend
          docker push $REGISTRY:frontend-latest
          docker build -t $REGISTRY:catalogue-latest ./catalogue
          docker push $REGISTRY:catalogue-latest
          docker build -t $REGISTRY:voting-latest ./voting
          docker push $REGISTRY:voting-latest
          docker build -t $REGISTRY:recommendation-latest ./recommendation
          docker push $REGISTRY:recommendation-latest

  # -------------------------------
  # ✅ 3. Deploy to K8s (MicroK8s)
  # -------------------------------
  deploy_with_k8s:
    runs-on: ubuntu-latest
    needs: [docker_build_push]
    if: contains(join(github.event.pull_request.changed_files.*), 'k8s/')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Fetch Infra State Branch
        run: |
          git fetch origin infra-state || echo "[WARN] No infra-state branch found."
          if git ls-tree -r origin/infra-state --name-only | grep -q 'infra-state/'; then
            git restore --source=origin/infra-state infra-state/
            echo "[INFO] Infra state files restored:"
            ls -l infra-state
          else
            echo "[ERROR] No infra-state directory found. Cannot proceed."
            exit 1
          fi

      - name: SSH into Master Node & Setup K8s
        run: |
          MASTER_IP=$(head -n 1 infra-state/instance_ips.txt)
          chmod 600 infra-state/k8s-key.pem

          ssh -o StrictHostKeyChecking=no -i infra-state/k8s-key.pem ubuntu@$MASTER_IP << 'EOF'
            sudo snap install microk8s --classic
            sudo usermod -a -G microk8s ubuntu
            sudo chown -R ubuntu ~/.kube
            newgrp microk8s
            microk8s status --wait-ready
            microk8s enable dns storage
            echo "[INFO] MicroK8s installed and ready"
          EOF

      - name: Deploy App to K8s
        run: |
          MASTER_IP=$(head -n 1 infra-state/instance_ips.txt)
          ssh -o StrictHostKeyChecking=no -i infra-state/k8s-key.pem ubuntu@$MASTER_IP << 'EOF'
            microk8s kubectl apply -f /home/ubuntu/k8s/
          EOF
