name: Full CI/CD Pipeline (Infra → Docker → K8s)

on:
  push:
    branches: [main]
    paths:
      - 'infra/**'
      - 'Dockerfile'
      - 'frontend/**'
      - 'catalogue/**'
      - 'voting/**'
      - 'recommendation/**'
      - 'k8s-manifests/**'
  workflow_dispatch:

permissions:
  contents: write

env:
  REGISTRY: kmn1624/craftista
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  # ======================================
  # 1. Provision Infrastructure
  # ======================================
  provision_infra:
    name: Provision Infra
    runs-on: ubuntu-latest
    if: |
      contains(join(github.event.commits.*.modified, ' '), 'infra/') ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init & Apply
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve

      - name: Extract Outputs or Fallback
        run: |
          cd infra
          echo "[INFO] Extracting Terraform outputs..."
          OUTPUT=$(terraform output -json || echo "")

          if [ -z "$OUTPUT" ] || ! echo "$OUTPUT" | jq empty >/dev/null 2>&1; then
            echo "[WARN] Terraform outputs invalid. Using AWS CLI fallback..."
            pip install awscli --quiet
            INSTANCE_IPS=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=k8s-*" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            echo "$INSTANCE_IPS" | tr '\t' '\n' > instance_ips.txt
            if [ ! -f k8s-key.pem ]; then
              echo "[ERROR] SSH key missing!"
              terraform destroy -auto-approve
              exit 1
            fi
          else
            echo "$OUTPUT" > outputs.json
            echo "$OUTPUT" | jq -r '.instance_ips.value[]?' > instance_ips.txt
            echo "$OUTPUT" | jq -r '.private_key.value' > k8s-key.pem
            chmod 600 k8s-key.pem
          fi

      - name: Push Infra State to Branch
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin
          git checkout infra-state || git checkout --orphan infra-state
          mkdir -p infra-state
          cp infra/instance_ips.txt infra/k8s-key.pem infra-state/
          git add infra-state/
          git commit -m "Update infra state"
          git push origin infra-state --force

  # ======================================
  # 2. Build & Push Docker Images
  # ======================================
  build_docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [provision_infra]
    if: |
      contains(join(github.event.commits.*.modified, ' '), 'frontend/') ||
      contains(join(github.event.commits.*.modified, ' '), 'catalogue/') ||
      contains(join(github.event.commits.*.modified, ' '), 'voting/') ||
      contains(join(github.event.commits.*.modified, ' '), 'recommendation/') ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Restore Infra State
        run: |
          git fetch origin infra-state
          git restore --source=origin/infra-state infra-state/
          echo "[INFO] Files restored:"
          ls -l infra-state

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Images
        run: |
          docker build -t $REGISTRY:frontend-latest ./frontend
          docker push $REGISTRY:frontend-latest
          docker build -t $REGISTRY:catalogue-latest ./catalogue
          docker push $REGISTRY:catalogue-latest
          docker build -t $REGISTRY:voting-latest ./voting
          docker push $REGISTRY:voting-latest
          docker build -t $REGISTRY:recommendation-latest ./recommendation
          docker push $REGISTRY:recommendation-latest

  # ======================================
  # 3. Deploy to Kubernetes
  # ======================================
  deploy_k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build_docker]
    if: |
      contains(join(github.event.commits.*.modified, ' '), 'k8s-manifests/') ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Restore Infra State
        run: |
          git fetch origin infra-state
          git restore --source=origin/infra-state infra-state/
          echo "[INFO] Files restored:"
          ls -l infra-state

      - name: Verify Key and IPs Exist
        run: |
          if [ ! -f infra-state/k8s-key.pem ]; then
            echo "[ERROR] SSH key missing. Cannot deploy!"
            exit 1
          fi
          if [ ! -f infra-state/instance_ips.txt ]; then
            echo "[ERROR] Instance IPs missing. Cannot deploy!"
            exit 1
          fi

      - name: Deploy to MicroK8s with Retry
        run: |
          KEY="$GITHUB_WORKSPACE/infra-state/k8s-key.pem"
          chmod 600 "$KEY"
          FIRST_NODE=$(head -n1 infra-state/instance_ips.txt)

          echo "[INFO] Copying manifests to $FIRST_NODE"
          n=0
          until [ $n -ge 3 ]
          do
            scp -o StrictHostKeyChecking=no -i "$KEY" -r ./k8s-manifests ubuntu@$FIRST_NODE:/home/ubuntu/k8s-manifests && break
            n=$((n+1))
            echo "[WARN] SCP failed. Retrying in 10s... ($n/3)"
            sleep 10
          done

          echo "[INFO] Installing MicroK8s & deploying"
          n=0
          until [ $n -ge 3 ]
          do
            ssh -o StrictHostKeyChecking=no -i "$KEY" ubuntu@$FIRST_NODE "
              if ! command -v microk8s &> /dev/null; then
                echo '[INFO] Installing MicroK8s...'
                sudo snap install microk8s --classic --channel=1.32/stable
              fi

              sudo groupadd -f microk8s
              sudo usermod -a -G microk8s ubuntu
              sudo mkdir -p /home/ubuntu/.kube
              sudo chown -R ubuntu /home/ubuntu/.kube

              echo '[INFO] Waiting for MicroK8s to be ready...'
              sudo microk8s status --wait-ready

              sudo microk8s enable dns storage

              sudo microk8s config > /home/ubuntu/.kube/config
              sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config

              export KUBECONFIG=/home/ubuntu/.kube/config
              sudo microk8s kubectl apply -f /home/ubuntu/k8s-manifests/
            " && break
            n=$((n+1))
            echo "[WARN] SSH deployment failed. Retrying in 15s... ($n/3)"
            sleep 15
          done
