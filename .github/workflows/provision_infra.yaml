name: Full Infrastructure → Docker → ArgoCD Deployment

on:
  push:
    paths:
      - 'infra/**'
      - 'Dockerfile'
      - 'frontend/**'
      - 'catalogue/**'
      - 'voting/**'
      - 'recommendation/**'
      - 'k8s/**'
  workflow_dispatch:

permissions:
  contents: write

env:
  REGISTRY: kmn1624/craftista
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:

  # ===================== INFRA JOB =====================
  infra:
    name: Provision AWS Infrastructure
    runs-on: ubuntu-latest
    if: contains(join(github.event.commits.*.modified, ' '), 'infra/')
    steps:
      - name: ✅ Checkout repo
        uses: actions/checkout@v4

      - name: ✅ Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: ✅ Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ✅ Terraform Apply
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve

      - name: ✅ Extract Outputs & Push to Branch
        run: |
          cd infra
          OUTPUT=$(terraform output -json || echo "")
          if [ -z "$OUTPUT" ] || ! echo "$OUTPUT" | jq empty >/dev/null 2>&1; then
            echo "[WARN] Terraform outputs invalid, using AWS CLI fallback."
            pip install awscli --quiet
            INSTANCE_IPS=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=k8s-*" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            echo "$INSTANCE_IPS" | tr '\t' '\n' > instance_ips.txt
          else
            echo "$OUTPUT" | jq -r '.instance_ips.value[]?' > instance_ips.txt
            echo "$OUTPUT" | jq -r '.private_key.value' > k8s-key.pem
          fi
          chmod 600 k8s-key.pem
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin
          if git ls-remote --exit-code --heads origin infra-state; then
            git switch infra-state
          else
            git switch --orphan infra-state
          fi
          mkdir -p infra-state
          cp instance_ips.txt k8s-key.pem infra-state/
          git add infra-state/
          git commit -m "Update infra state"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git infra-state --force

    

  # ===================== DOCKER JOB =====================
  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: infra
    if: >
      contains(join(github.event.commits.*.modified, ' '), 'frontend/') ||
      contains(join(github.event.commits.*.modified, ' '), 'catalogue/') ||
      contains(join(github.event.commits.*.modified, ' '), 'voting/') ||
      contains(join(github.event.commits.*.modified, ' '), 'recommendation/') ||
      contains(join(github.event.commits.*.modified, ' '), 'Dockerfile')
    steps:
      - name: ✅ Checkout repo
        uses: actions/checkout@v4

      - name: ✅ Fetch infra-state branch
        run: |
          git fetch origin infra-state:infra-state
          git switch infra-state
          echo "[INFO] Infra files present:"
          ls -l infra-state

      - name: ✅ Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: ✅ Build & Push
        run: |
          docker build -t $REGISTRY:frontend-${GITHUB_SHA} ./frontend
          docker push $REGISTRY:frontend-${GITHUB_SHA}
          docker build -t $REGISTRY:catalogue-${GITHUB_SHA} ./catalogue
          docker push $REGISTRY:catalogue-${GITHUB_SHA}
          docker build -t $REGISTRY:voting-${GITHUB_SHA} ./voting
          docker push $REGISTRY:voting-${GITHUB_SHA}
          docker build -t $REGISTRY:recommendation-${GITHUB_SHA} ./recommendation
          docker push $REGISTRY:recommendation-${GITHUB_SHA}

      - name: ✅ Update K8s Manifests with New Image Tags
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin
          git switch main
          sed -i "s|image: .*/frontend.*|image: $REGISTRY:frontend-${GITHUB_SHA}|" k8s/frontend-deployment.yaml
          sed -i "s|image: .*/catalogue.*|image: $REGISTRY:catalogue-${GITHUB_SHA}|" k8s/catalogue-deployment.yaml
          sed -i "s|image: .*/voting.*|image: $REGISTRY:voting-${GITHUB_SHA}|" k8s/voting-deployment.yaml
          sed -i "s|image: .*/recommendation.*|image: $REGISTRY:recommendation-${GITHUB_SHA}|" k8s/recommendation-deployment.yaml
          git add k8s/
          git commit -m "Update image tags for deployment"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main

  # ===================== K8S DEPLOY VIA ARGOCD =====================
  deploy:
    name: ArgoCD Sync Trigger
    runs-on: ubuntu-latest
    needs: docker
    if: contains(join(github.event.commits.*.modified, ' '), 'k8s/')
    steps:
      - name: ✅ Trigger ArgoCD Sync
        run: |
          curl -k -X POST \
            -H "Content-Type: application/json" \
            -d '{"revision":"main"}' \
            -u "admin:${{ secrets.ARGOCD_ADMIN_PASSWORD }}" \
            ${{ secrets.ARGOCD_SERVER }}/api/v1/applications/craftista/sync
